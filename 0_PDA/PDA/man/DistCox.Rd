% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DistCox.R
\name{DistCox}
\alias{DistCox}
\title{ODACO: One-shot Distributed Algorithm of COx regression}
\usage{
DistCox(mydata, id.local=1, init_est = 'local',  output.ODACO1=F, strat=F, control=list(maxit=100), verbose = F)
}
\arguments{
\item{mydata}{Data frame of the data from all sites, with the first three columns as site id, event time, 
event indicator (TRUE=event observed, FALSE=censored) and the rest columns as covariates.}

\item{init_est}{Character or numeric vector, default 'local' which uses local est as initial beta_bar.}

\item{verbose}{Logical - show running details?}

\item{output.ODACO1}{Logical - output ODACO1, which the surrogate L is 1st order approximation? Default FALSE.}

\item{strat}{Logical, TRUE=assume heterogeneous baseline hazard in each site, FALSE=the same. Default FALSE.}

\item{control}{control options passed to \code{optim()}, e.g. list(maxit=100).}
}
\value{
List with component:

\item{beta_bar}{init coef est}

\item{beta_tilde}{DistCox coef est by optimizing the surrogate L by 2nd order approximation}

\item{var_tilde}{var of beta_tilde calculated from hessian}

\item{grad_LN_L1_beta_bar}{gradient from remote machines}

\item{hess_LN_L1_beta_bar}{hessian  from remote machines}

\item{beta_tilde1}{DistCox coef est by optimizing the surrogate L by 1st order approximation}

\item{var_tilde1}{var of beta_tilde1 calculated from hessian}

\item{sol}{an \code{optim()} output, containing beta_tilde}

\item{sol1}{an \code{optim()} output, containing beta_tilde1}
}
\description{
Fit a  Distributed Cox regression that only requires one-shot communication between 
              the local and remote sites, by optimizing Jordan's surrogate log-likelihood (Jordan2018JASA) function.
}
\details{
The surrogate log-likelihood is the logL of local machine plus 
         the 1st and 2nd order approximation of the logL of remote machines
         Ltilde(beta) = L1(beta) + sum(beta * grad(LN(beta_bar) - L1(beta_bar)))+ t(beta) %*% hessian(LN(beta_bar) - L1(beta_bar)) %*% beta / 2.
         It's optimized by \code{optim()}. The log-L, gradients and hessian are written in Rcpp.
}
\examples{
library(survival)
data(lung, package = 'survival')
table(lung$inst)
# set inst#1 as the loal site
# choose age and sex as covariates
lung1 <- lung[, c('inst', 'time', 'status', 'age', 'sex')]
lung1$status <- lung1$status==2

# proposed DistCox, use likelihood from local and gradient and hessian from remote
fit.ODAC <- DistCox(mydata = lung1,
                        id.local = 1,
                        init_est = 'local',
                        strat = F,
                        output.ODACO1 = T)
# use pooled data, survival::coxph()  
fit.pool <- coxph(Surv(time, status) ~ age+sex, data=lung1)
# compare: DistCox (beta_tilde and beta_tilde1) obtains coef est better than using local only, closer to use pooled data
rbind(fit.ODAC$beta_bar,
      fit.ODAC$beta_tilde,
      fit.ODAC$beta_tilde1, 
      fit.pool$coef) 
# compare s.d. estimates
rbind(sqrt(fit.ODAC$var_tilde),
      sqrt(fit.ODAC$var_tilde1),
      summary(fit.pool)$coef[,3] )
      
######## assume heterogeneous baseline hazard  ##########
## set 3 fake sites       
 lung2=lung[,1:5]
lung2$inst[lung$inst>=2] = 2
lung2$inst[lung$inst>=12] = 3
lung2$inst[is.na(lung2$inst)] <- 3
table(lung2$inst)
lung2$status <- lung2$status == 2
fit.ODACH.3 = DistCox(mydata=lung2, id.local = 3, init_est = 'local', output.ODACO1 = T, verbose = T, strat = T)
fit.ODACH.2 = DistCox(mydata=lung2, id.local = 2, init_est = 'local', output.ODACO1 = T, verbose = T, strat = T)
fit.ODACH.1 = DistCox(mydata=lung2, id.local = 1, init_est = 'local', output.ODACO1 = T, verbose = T, strat = T)
fit.strCox <- coxph(Surv(time, status) ~ age+sex +strata(inst), data=lung2 )
rbind(fit.ODACH.1$beta_bar, 
      fit.ODACH.2$beta_bar, 
      fit.ODACH.3$beta_bar, 
      fit.ODACH.1$beta_tilde, 
      fit.ODACH.2$beta_tilde,
      fit.ODACH.3$beta_tilde
      fit.strCox$coef,
      lung_cox_pkg$coef)

# par(mfrow=c(1,3))
# for(ii in 1:3){
#   fit.cox <- coxph(Surv(time, status) ~ age+sex, data=lung2, subset = inst==ii) 
#   plot(survfit(fit.cox), fun='cumhaz', main=paste0("cumulative hazard of inst ", ii), xlim=c(0,1100), ylim=c(0,3.5))
# }

}
\references{
Jordan, Michael I., Jason D. Lee, and Yun Yang. "Communication-efficient distributed statistical inference." JASA (2018).
}
\author{
Chongliang Luo, Rui Duan, Yong Chen
}
