diff --git a/R/DLM.R b/R/DLM.R
index 687c891..1045c2b 100644
--- a/R/DLM.R
+++ b/R/DLM.R
@@ -106,7 +106,7 @@ DLM.estimate <- function(ipdata=NULL,control,config) {
     
     names(sebhat) <- names(bhat) <- control$risk_factor
      
-    res <- list(bhat=bhat, sebhat=sebhat, sigmahat=sigmahat)
+    res <- list(risk_factor=control$risk_factor, bhat=bhat, sebhat=sebhat, sigmahat=sigmahat)
   }else if(control$heterogeneity_effect=='fixed'){
     ############## (2) Linear model with fixed effects ##############
     # calculate total no. parameters p, warning if too many  
@@ -145,7 +145,9 @@ DLM.estimate <- function(ipdata=NULL,control,config) {
     row.names(uhat) <- row.names(seuhat) <- ss
     colnames(uhat) <- colnames(seuhat) <- control$risk_factor_heterogeneity
     
-    res <- list(bhat=bhat, sebhat=sebhat, sigmahat=sigmahat, uhat=uhat, seuhat=seuhat)
+    res <- list(risk_factor=control$risk_factor, risk_factor_heterogeneity=control$risk_factor_heterogeneity, 
+                bhat=bhat, sebhat=sebhat, sigmahat=sigmahat, uhat=uhat, seuhat=seuhat)
+    # res <- lapply(res, function(a) as.data.frame(a))
   }else if(control$heterogeneity_effect=='random'){  # DLMM
     ############## (3) Linear model with random site effects (DLMM)  ##### 
     # LMM
@@ -155,17 +157,22 @@ DLM.estimate <- function(ipdata=NULL,control,config) {
     
     bhat <- c(fit1$b)
     sebhat <- fit1$b.sd               # sd of fixed effect est
-    uhat <- t(sapply(fit1$ui, function(a) a))          # BLUP of random effects
-    seuhat <- t(sqrt(sapply(fit1$varui_post, diag)))   # se of BLUPs
+    uhat <- as.matrix(sapply(fit1$ui, function(a) a) )          # BLUP of random effects
+    seuhat <- as.matrix(sqrt(sapply(fit1$varui_post, diag)))   # se of BLUPs
     sigmahat <- sqrt(fit1$s2)         # se of common error
     Vhat <- fit1$V                    # variance components: Var(ui)
-    
+
     names(sebhat) <- names(bhat) <- control$risk_factor
     row.names(uhat) <- row.names(seuhat) <- control$sites
     colnames(uhat) <- colnames(seuhat) <- control$risk_factor_heterogeneity
     colnames(Vhat) <- row.names(Vhat) <- control$risk_factor_heterogeneity
-    
-    res <- list(bhat=bhat, sebhat=sebhat, sigmahat=sigmahat, uhat=uhat, seuhat=seuhat, Vhat=Vhat)
+   
+    res <- list(risk_factor=control$risk_factor, risk_factor_heterogeneity=control$risk_factor_heterogeneity, 
+                bhat=bhat, sebhat=sebhat, sigmahat=sigmahat, uhat=uhat, seuhat=seuhat, Vhat=Vhat)
+    # res <- lapply(res, function(a) as.data.frame(a))
+    # RJSONIO::fromJSON(RJSONIO::toJSON(res))
+    # jsonlite::
+    # rjson::    
   }
   
   return(res)
diff --git a/R/dlmm.R b/R/dlmm.R
index c42ab03..5d6b044 100644
--- a/R/dlmm.R
+++ b/R/dlmm.R
@@ -321,6 +321,7 @@ lmm.fit <- function(Y = NULL, X = NULL, Z = NULL, id.site = NULL, weights = NULL
     
     # res <- optim(mypar.init, fn, hessian = hessian)
     res <- minqa::bobyqa(mypar.init, fn, lower=rep(1e-6, pz), control=list(maxfun=1e5))
+    # res <- nloptwrap(mypar.init, fn, lower=rep(1e-6, pz), upper = rep(1e6, pz), control=list(maxfun=1e5))
     
     mypar <- res$par
     if(corstr == 'independence'){
@@ -373,6 +374,8 @@ lmm.fit <- function(Y = NULL, X = NULL, Z = NULL, id.site = NULL, weights = NULL
     
     # res <- optim(mypar.init, fn, hessian = hessian)
     res <- minqa::bobyqa(mypar.init, fn, lower=rep(1e-6, length(mypar.init)), control=list(maxfun=1e5))
+    # res <- nloptwrap(mypar.init, fn, lower=rep(1e-6, length(mypar.init)), 
+    #                  upper =rep(1e6, length(mypar.init)),  control=list(maxfun=1e5))
     
     mypar <- res$par
     if(corstr == 'independence'){
diff --git a/demo/DLM.R b/demo/DLM.R
index 814a739..e0fcff3 100644
--- a/demo/DLM.R
+++ b/demo/DLM.R
@@ -40,8 +40,7 @@ control <- list(project_name = 'Length of stay study',
 mydir <- getwd()  # tempdir()
 ## assume lead site1: enter "1" to allow transferring the control file 
 pda(site_id = 'site1', control = control, dir = mydir)
-# plot(load.image("https://raw.githubusercontent.com/Penncil/pda/master/demo/figures/p0.png"), axes=FALSE)
-
+ 
 
 ## in actual collaboration, account/password for pda server will be assigned, thus:
 # pda(site_id = 'site1', control = control, uri = 'https://pda.one', secret='abc123')
@@ -52,26 +51,22 @@ pda(site_id = 'site1', control = control, dir = mydir)
 S=readline(prompt="Type  <Return>   to continue : ")
 ## assume remote site3: enter "1" to allow tranferring your local estimate 
 pda(site_id = 'site3', ipdata = LOS_split[[3]], dir=mydir)
-# plot(load.image("https://raw.githubusercontent.com/Penncil/pda/master/demo/figures/p12.png"), axes=FALSE)
-
+ 
 S=readline(prompt="Type  <Return>   to continue : ")
 ## assume remote site2: enter "1" to allow tranferring your local estimate  
 pda(site_id = 'site2', ipdata = LOS_split[[2]], dir=mydir)
-# plot(load.image("https://raw.githubusercontent.com/Penncil/pda/master/demo/figures/p11.png"), axes=FALSE)
-
+ 
 S=readline(prompt="Type  <Return>   to continue : ")
 ## assume lead site1: enter "1" to allow tranferring your local estimate  
 ## control.json is also automatically updated
 pda(site_id = 'site1', ipdata = LOS_split[[1]], dir=mydir)
-# plot(load.image("https://raw.githubusercontent.com/Penncil/pda/master/demo/figures/p13.png"), axes=FALSE)
  
 
 S=readline(prompt="Type  <Return>   to continue : ")
 # ############################  STEP 2: estimate  ###############################
 ## assume lead site1: enter "1" to allow tranferring the surrogate estimate  
 pda(site_id = 'site1', ipdata = LOS_split[[1]], dir=mydir)
-# plot(load.image("https://raw.githubusercontent.com/Penncil/pda/master/demo/figures/p31.png"), axes=FALSE)
-
+ 
 ## the PDA DLM is now completed!
 
 S=readline(prompt="Type  <Return>   to continue : ")
@@ -111,9 +106,9 @@ fit.pool <- lm(los~age+sex+lab+site, data=LOS)
 # config <- getCloudConfig(site_id = 'site1', dir=mydir)
 fit.dlm <- pdaGet(name = 'site1_estimate', config = config)
 cbind(b.pool=fit.pool$coef,
-      b.dlm=c(fit.dlm$bhat, fit.dlm$uhat),      # ?
+      b.dlm=c(fit.dlm$bhat, fit.dlm$uhat),       
       sd.pool=summary(fit.pool)$coef[,2],  
-      sd.dlm=c(fit.dlm$sebhat, fit.dlm$seuhat)) # ?
+      sd.dlm=c(fit.dlm$sebhat, fit.dlm$seuhat))  
 
 
 
@@ -137,18 +132,18 @@ pda(site_id = 'site1', control = control, dir = mydir)
 pda(site_id = 'site1', ipdata = LOS_split[[1]], dir=mydir)
 
 ## fit LM using pooled data, assuming fixed site effect
-fit.pool <- lme4::lmer(los~age+sex+lab+(1|site), data=LOS)
+fit.pool <- lme4::lmer(los~age+sex+lab+(1|site), REML = F, data=LOS)
 fit.dlm <- pdaGet(name = 'site1_estimate', config = config)
 # fixed effects
-cbind(b.pool=summary(fit.pool)$coef,
-      b.dlm= fit.dlm$bhat,      # ?
-      sd.pool=summary(fit.pool)$coef[,2],  
-      sd.dlm= fit.dlm$sebhat) # ?
+cbind(b.pool = summary(fit.pool)$coef[,1],
+      b.dlm = c(fit.dlm$bhat),      
+      sd.pool = summary(fit.pool)$coef[,2],  
+      sd.dlm = fit.dlm$sebhat)  
 
 # var component
 cbind(data.frame(summary(fit.pool)$varcor)$vcov, 
       c(fit.dlm$Vhat, fit.dlm$sigmahat^2) )
 
 # random effects (BLUP)
-cbind(u.pool= ranef(fit.pool),
-      u.dlm = fit.dlm$seuhat)
+cbind(u.pool = ranef(fit.pool)$site,
+      u.dlm = c(fit.dlm$uhat))
